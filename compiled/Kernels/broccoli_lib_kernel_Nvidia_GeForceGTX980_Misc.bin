//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: UNKNOWN
// Driver 
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_52, texmode_independent
.address_size 32

	// .globl	IdentityMatrix

.entry IdentityMatrix(
	.param .u32 .ptr .global .align 4 IdentityMatrix_param_0,
	.param .u32 IdentityMatrix_param_1
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<20>;


	ld.param.u32 	%r4, [IdentityMatrix_param_0];
	ld.param.u32 	%r5, [IdentityMatrix_param_1];
	mov.b32	%r6, %envreg3;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mad.lo.s32 	%r9, %r7, %r8, %r6;
	mov.u32 	%r10, %tid.x;
	add.s32 	%r1, %r9, %r10;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %ntid.y;
	mov.b32	%r13, %envreg4;
	mad.lo.s32 	%r14, %r11, %r12, %r13;
	mov.u32 	%r15, %tid.y;
	add.s32 	%r2, %r14, %r15;
	setp.ge.s32	%p1, %r1, %r5;
	setp.ge.s32	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB0_4;

	setp.eq.s32	%p4, %r1, %r2;
	mad.lo.s32 	%r16, %r2, %r5, %r1;
	shl.b32 	%r17, %r16, 2;
	add.s32 	%r3, %r4, %r17;
	@%p4 bra 	BB0_3;
	bra.uni 	BB0_2;

BB0_3:
	mov.u32 	%r19, 1065353216;
	st.global.u32 	[%r3], %r19;
	bra.uni 	BB0_4;

BB0_2:
	mov.u32 	%r18, 0;
	st.global.u32 	[%r3], %r18;

BB0_4:
	ret;
}

	// .globl	IdentityMatrixDouble
.entry IdentityMatrixDouble(
	.param .u32 .ptr .global .align 8 IdentityMatrixDouble_param_0,
	.param .u32 IdentityMatrixDouble_param_1
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<3>;


	ld.param.u32 	%r4, [IdentityMatrixDouble_param_0];
	ld.param.u32 	%r5, [IdentityMatrixDouble_param_1];
	mov.b32	%r6, %envreg3;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mad.lo.s32 	%r9, %r7, %r8, %r6;
	mov.u32 	%r10, %tid.x;
	add.s32 	%r1, %r9, %r10;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %ntid.y;
	mov.b32	%r13, %envreg4;
	mad.lo.s32 	%r14, %r11, %r12, %r13;
	mov.u32 	%r15, %tid.y;
	add.s32 	%r2, %r14, %r15;
	setp.ge.s32	%p1, %r1, %r5;
	setp.ge.s32	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB1_4;

	setp.eq.s32	%p4, %r1, %r2;
	mad.lo.s32 	%r16, %r2, %r5, %r1;
	shl.b32 	%r17, %r16, 3;
	add.s32 	%r3, %r4, %r17;
	@%p4 bra 	BB1_3;
	bra.uni 	BB1_2;

BB1_3:
	mov.u64 	%rd2, 4607182418800017408;
	st.global.u64 	[%r3], %rd2;
	bra.uni 	BB1_4;

BB1_2:
	mov.u64 	%rd1, 0;
	st.global.u64 	[%r3], %rd1;

BB1_4:
	ret;
}

	// .globl	LogitMatrix
.entry LogitMatrix(
	.param .u32 .ptr .global .align 4 LogitMatrix_param_0,
	.param .u32 LogitMatrix_param_1
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<19>;
	.reg .b32 	%r<11>;


	ld.param.u32 	%r2, [LogitMatrix_param_0];
	ld.param.u32 	%r3, [LogitMatrix_param_1];
	mov.b32	%r4, %envreg3;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mad.lo.s32 	%r7, %r5, %r6, %r4;
	mov.u32 	%r8, %tid.x;
	add.s32 	%r1, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB2_2;

	shl.b32 	%r9, %r1, 2;
	add.s32 	%r10, %r2, %r9;
	ld.global.f32 	%f3, [%r10];
	neg.f32 	%f4, %f3;
	mul.f32 	%f5, %f3, 0fBFB8AA3B;
	cvt.rzi.f32.f32	%f6, %f5;
	mov.f32 	%f7, 0fBF317200;
	fma.rn.f32 	%f8, %f6, %f7, %f4;
	mov.f32 	%f9, 0fB5BFBE8E;
	fma.rn.f32 	%f10, %f6, %f9, %f8;
	mul.f32 	%f2, %f10, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f1,%f2;
	// inline asm
	add.f32 	%f11, %f6, 0f00000000;
	ex2.approx.f32 	%f12, %f11;
	setp.gt.f32	%p2, %f3, 0f42D20000;
	setp.lt.f32	%p3, %f3, 0fC2D20000;
	fma.rn.f32 	%f13, %f1, %f12, 0f3F800000;
	mov.f32 	%f14, 0fC0000000;
	div.full.f32 	%f15, %f14, %f13;
	add.f32 	%f16, %f15, 0f3F800000;
	selp.f32	%f17, 0fBF800000, %f16, %p2;
	selp.f32	%f18, 0f3F800000, %f17, %p3;
	st.global.f32 	[%r10], %f18;

BB2_2:
	ret;
}

	// .globl	LogitMatrixDouble
.entry LogitMatrixDouble(
	.param .u32 .ptr .global .align 8 LogitMatrixDouble_param_0,
	.param .u32 LogitMatrixDouble_param_1
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<25>;
	.reg .f64 	%fd<51>;


	ld.param.u32 	%r8, [LogitMatrixDouble_param_0];
	ld.param.u32 	%r9, [LogitMatrixDouble_param_1];
	mov.b32	%r10, %envreg3;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %ntid.x;
	mad.lo.s32 	%r13, %r11, %r12, %r10;
	mov.u32 	%r14, %tid.x;
	add.s32 	%r1, %r13, %r14;
	setp.ge.s32	%p1, %r1, %r9;
	@%p1 bra 	BB3_8;

	shl.b32 	%r15, %r1, 3;
	add.s32 	%r2, %r8, %r15;
	ld.global.f64 	%fd1, [%r2];
	neg.f64 	%fd2, %fd1;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r3}, %fd2;
	}
	mov.b32 	 %f1, %r3;
	abs.f32 	%f2, %f1;
	setp.lt.f32	%p2, %f2, 0f40874911;
	@%p2 bra 	BB3_3;
	bra.uni 	BB3_2;

BB3_3:
	mov.f64 	%fd12, 0d3FF71547652B82FE;
	mul.rn.f64 	%fd13, %fd2, %fd12;
	mov.f64 	%fd14, 0d4338000000000000;
	add.rn.f64 	%fd15, %fd13, %fd14;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r4, %temp}, %fd15;
	}
	mov.f64 	%fd16, 0dC338000000000000;
	add.rn.f64 	%fd17, %fd15, %fd16;
	mov.f64 	%fd18, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd19, %fd17, %fd18, %fd2;
	mov.f64 	%fd20, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd21, %fd17, %fd20, %fd19;
	mov.f64 	%fd22, 0d3E928AF3FCA213EA;
	mov.f64 	%fd23, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd24, %fd23, %fd21, %fd22;
	mov.f64 	%fd25, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd26, %fd24, %fd21, %fd25;
	mov.f64 	%fd27, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd28, %fd26, %fd21, %fd27;
	mov.f64 	%fd29, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd30, %fd28, %fd21, %fd29;
	mov.f64 	%fd31, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd32, %fd30, %fd21, %fd31;
	mov.f64 	%fd33, 0d3F81111111122322;
	fma.rn.f64 	%fd34, %fd32, %fd21, %fd33;
	mov.f64 	%fd35, 0d3FA55555555502A1;
	fma.rn.f64 	%fd36, %fd34, %fd21, %fd35;
	mov.f64 	%fd37, 0d3FC5555555555511;
	fma.rn.f64 	%fd38, %fd36, %fd21, %fd37;
	mov.f64 	%fd39, 0d3FE000000000000B;
	fma.rn.f64 	%fd40, %fd38, %fd21, %fd39;
	mov.f64 	%fd41, 0d3FF0000000000000;
	fma.rn.f64 	%fd42, %fd40, %fd21, %fd41;
	fma.rn.f64 	%fd49, %fd42, %fd21, %fd41;
	abs.s32 	%r16, %r4;
	setp.lt.s32	%p5, %r16, 1023;
	@%p5 bra 	BB3_5;
	bra.uni 	BB3_4;

BB3_5:
	shl.b32 	%r22, %r4, 20;
	add.s32 	%r24, %r22, 1072693248;
	bra.uni 	BB3_6;

BB3_2:
	setp.lt.s32	%p3, %r3, 0;
	selp.f64	%fd9, 0d0000000000000000, 0d7FF0000000000000, %p3;
	abs.f64 	%fd10, %fd2;
	setp.gtu.f64	%p4, %fd10, 0d7FF0000000000000;
	sub.f64 	%fd11, %fd2, %fd1;
	selp.f64	%fd50, %fd11, %fd9, %p4;
	bra.uni 	BB3_7;

BB3_4:
	add.s32 	%r17, %r4, 2046;
	shl.b32 	%r18, %r17, 19;
	and.b32  	%r19, %r18, -1048576;
	shl.b32 	%r20, %r17, 20;
	sub.s32 	%r24, %r20, %r19;
	mov.u32 	%r21, 0;
	mov.b64 	%fd43, {%r21, %r19};
	mul.f64 	%fd49, %fd49, %fd43;

BB3_6:
	mov.u32 	%r23, 0;
	mov.b64 	%fd44, {%r23, %r24};
	mul.f64 	%fd50, %fd49, %fd44;

BB3_7:
	add.f64 	%fd45, %fd50, 0d3FF0000000000000;
	mov.f64 	%fd46, 0dC000000000000000;
	div.rn.f64 	%fd47, %fd46, %fd45;
	add.f64 	%fd48, %fd47, 0d3FF0000000000000;
	st.global.f64 	[%r2], %fd48;

BB3_8:
	ret;
}

	// .globl	GetSubMatrix
.entry GetSubMatrix(
	.param .u32 .ptr .global .align 4 GetSubMatrix_param_0,
	.param .u32 .ptr .global .align 4 GetSubMatrix_param_1,
	.param .u32 GetSubMatrix_param_2,
	.param .u32 GetSubMatrix_param_3,
	.param .u32 GetSubMatrix_param_4,
	.param .u32 GetSubMatrix_param_5,
	.param .u32 GetSubMatrix_param_6,
	.param .u32 GetSubMatrix_param_7
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<29>;


	ld.param.u32 	%r5, [GetSubMatrix_param_0];
	ld.param.u32 	%r6, [GetSubMatrix_param_1];
	ld.param.u32 	%r9, [GetSubMatrix_param_2];
	ld.param.u32 	%r10, [GetSubMatrix_param_3];
	ld.param.u32 	%r7, [GetSubMatrix_param_4];
	ld.param.u32 	%r11, [GetSubMatrix_param_5];
	ld.param.u32 	%r8, [GetSubMatrix_param_6];
	ld.param.u32 	%r12, [GetSubMatrix_param_7];
	mov.b32	%r13, %envreg3;
	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r15, %ntid.x;
	mad.lo.s32 	%r16, %r14, %r15, %r13;
	mov.u32 	%r17, %tid.x;
	add.s32 	%r1, %r16, %r17;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %ntid.y;
	mov.b32	%r20, %envreg4;
	mad.lo.s32 	%r21, %r18, %r19, %r20;
	mov.u32 	%r22, %tid.y;
	add.s32 	%r2, %r21, %r22;
	add.s32 	%r3, %r1, %r10;
	setp.ge.s32	%p1, %r3, %r12;
	add.s32 	%r4, %r2, %r9;
	setp.ge.s32	%p2, %r4, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r1, %r11;
	or.pred  	%p5, %p3, %p4;
	setp.ge.s32	%p6, %r2, %r7;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	BB4_2;

	mad.lo.s32 	%r23, %r3, %r8, %r4;
	shl.b32 	%r24, %r23, 2;
	add.s32 	%r25, %r6, %r24;
	ld.global.f32 	%f1, [%r25];
	mad.lo.s32 	%r26, %r1, %r7, %r2;
	shl.b32 	%r27, %r26, 2;
	add.s32 	%r28, %r5, %r27;
	st.global.f32 	[%r28], %f1;

BB4_2:
	ret;
}

	// .globl	GetSubMatrixDouble
.entry GetSubMatrixDouble(
	.param .u32 .ptr .global .align 8 GetSubMatrixDouble_param_0,
	.param .u32 .ptr .global .align 8 GetSubMatrixDouble_param_1,
	.param .u32 GetSubMatrixDouble_param_2,
	.param .u32 GetSubMatrixDouble_param_3,
	.param .u32 GetSubMatrixDouble_param_4,
	.param .u32 GetSubMatrixDouble_param_5,
	.param .u32 GetSubMatrixDouble_param_6,
	.param .u32 GetSubMatrixDouble_param_7
)
{
	.reg .pred 	%p<8>;
	.reg .b32 	%r<29>;
	.reg .f64 	%fd<2>;


	ld.param.u32 	%r5, [GetSubMatrixDouble_param_0];
	ld.param.u32 	%r6, [GetSubMatrixDouble_param_1];
	ld.param.u32 	%r9, [GetSubMatrixDouble_param_2];
	ld.param.u32 	%r10, [GetSubMatrixDouble_param_3];
	ld.param.u32 	%r7, [GetSubMatrixDouble_param_4];
	ld.param.u32 	%r11, [GetSubMatrixDouble_param_5];
	ld.param.u32 	%r8, [GetSubMatrixDouble_param_6];
	ld.param.u32 	%r12, [GetSubMatrixDouble_param_7];
	mov.b32	%r13, %envreg3;
	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r15, %ntid.x;
	mad.lo.s32 	%r16, %r14, %r15, %r13;
	mov.u32 	%r17, %tid.x;
	add.s32 	%r1, %r16, %r17;
	mov.u32 	%r18, %ctaid.y;
	mov.u32 	%r19, %ntid.y;
	mov.b32	%r20, %envreg4;
	mad.lo.s32 	%r21, %r18, %r19, %r20;
	mov.u32 	%r22, %tid.y;
	add.s32 	%r2, %r21, %r22;
	add.s32 	%r3, %r1, %r10;
	setp.ge.s32	%p1, %r3, %r12;
	add.s32 	%r4, %r2, %r9;
	setp.ge.s32	%p2, %r4, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r1, %r11;
	or.pred  	%p5, %p3, %p4;
	setp.ge.s32	%p6, %r2, %r7;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	BB5_2;

	mad.lo.s32 	%r23, %r3, %r8, %r4;
	shl.b32 	%r24, %r23, 3;
	add.s32 	%r25, %r6, %r24;
	ld.global.f64 	%fd1, [%r25];
	mad.lo.s32 	%r26, %r1, %r7, %r2;
	shl.b32 	%r27, %r26, 3;
	add.s32 	%r28, %r5, %r27;
	st.global.f64 	[%r28], %fd1;

BB5_2:
	ret;
}

	// .globl	PermuteMatrix
.entry PermuteMatrix(
	.param .u32 .ptr .global .align 4 PermuteMatrix_param_0,
	.param .u32 .ptr .global .align 4 PermuteMatrix_param_1,
	.param .u32 .ptr .global .align 4 PermuteMatrix_param_2,
	.param .u32 PermuteMatrix_param_3,
	.param .u32 PermuteMatrix_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<27>;


	ld.param.u32 	%r3, [PermuteMatrix_param_0];
	ld.param.u32 	%r4, [PermuteMatrix_param_1];
	ld.param.u32 	%r5, [PermuteMatrix_param_2];
	ld.param.u32 	%r6, [PermuteMatrix_param_3];
	ld.param.u32 	%r7, [PermuteMatrix_param_4];
	mov.b32	%r8, %envreg3;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %ntid.x;
	mad.lo.s32 	%r11, %r9, %r10, %r8;
	mov.u32 	%r12, %tid.x;
	add.s32 	%r1, %r11, %r12;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %ntid.y;
	mov.b32	%r15, %envreg4;
	mad.lo.s32 	%r16, %r13, %r14, %r15;
	mov.u32 	%r17, %tid.y;
	add.s32 	%r2, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r7;
	setp.ge.s32	%p2, %r2, %r6;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB6_2;

	shl.b32 	%r18, %r1, 2;
	add.s32 	%r19, %r5, %r18;
	ld.global.u32 	%r20, [%r19];
	mad.lo.s32 	%r21, %r20, %r6, %r2;
	shl.b32 	%r22, %r21, 2;
	add.s32 	%r23, %r4, %r22;
	ld.global.f32 	%f1, [%r23];
	mad.lo.s32 	%r24, %r1, %r6, %r2;
	shl.b32 	%r25, %r24, 2;
	add.s32 	%r26, %r3, %r25;
	st.global.f32 	[%r26], %f1;

BB6_2:
	ret;
}

	// .globl	PermuteMatrixDouble
.entry PermuteMatrixDouble(
	.param .u32 .ptr .global .align 8 PermuteMatrixDouble_param_0,
	.param .u32 .ptr .global .align 8 PermuteMatrixDouble_param_1,
	.param .u32 .ptr .global .align 4 PermuteMatrixDouble_param_2,
	.param .u32 PermuteMatrixDouble_param_3,
	.param .u32 PermuteMatrixDouble_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<27>;
	.reg .f64 	%fd<2>;


	ld.param.u32 	%r3, [PermuteMatrixDouble_param_0];
	ld.param.u32 	%r4, [PermuteMatrixDouble_param_1];
	ld.param.u32 	%r5, [PermuteMatrixDouble_param_2];
	ld.param.u32 	%r6, [PermuteMatrixDouble_param_3];
	ld.param.u32 	%r7, [PermuteMatrixDouble_param_4];
	mov.b32	%r8, %envreg3;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %ntid.x;
	mad.lo.s32 	%r11, %r9, %r10, %r8;
	mov.u32 	%r12, %tid.x;
	add.s32 	%r1, %r11, %r12;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %ntid.y;
	mov.b32	%r15, %envreg4;
	mad.lo.s32 	%r16, %r13, %r14, %r15;
	mov.u32 	%r17, %tid.y;
	add.s32 	%r2, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r7;
	setp.ge.s32	%p2, %r2, %r6;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB7_2;

	shl.b32 	%r18, %r1, 2;
	add.s32 	%r19, %r5, %r18;
	ld.global.u32 	%r20, [%r19];
	mad.lo.s32 	%r21, %r20, %r6, %r2;
	shl.b32 	%r22, %r21, 3;
	add.s32 	%r23, %r4, %r22;
	ld.global.f64 	%fd1, [%r23];
	mad.lo.s32 	%r24, %r1, %r6, %r2;
	shl.b32 	%r25, %r24, 3;
	add.s32 	%r26, %r3, %r25;
	st.global.f64 	[%r26], %fd1;

BB7_2:
	ret;
}

	// .globl	CalculateColumnSums
.entry CalculateColumnSums(
	.param .u32 .ptr .global .align 4 CalculateColumnSums_param_0,
	.param .u32 .ptr .global .align 4 CalculateColumnSums_param_1,
	.param .u32 CalculateColumnSums_param_2,
	.param .u32 CalculateColumnSums_param_3,
	.param .u32 CalculateColumnSums_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<34>;


	ld.param.u32 	%r13, [CalculateColumnSums_param_0];
	ld.param.u32 	%r14, [CalculateColumnSums_param_1];
	ld.param.u32 	%r15, [CalculateColumnSums_param_2];
	ld.param.u32 	%r16, [CalculateColumnSums_param_3];
	ld.param.u32 	%r17, [CalculateColumnSums_param_4];
	mov.b32	%r18, %envreg3;
	mov.u32 	%r19, %ctaid.x;
	mov.u32 	%r20, %ntid.x;
	mad.lo.s32 	%r1, %r19, %r20, %r18;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r3, %r1, %r2;
	mov.u32 	%r21, %ctaid.y;
	mov.u32 	%r22, %ntid.y;
	mov.b32	%r23, %envreg4;
	mad.lo.s32 	%r4, %r21, %r22, %r23;
	mov.u32 	%r5, %tid.y;
	add.s32 	%r6, %r4, %r5;
	setp.ge.s32	%p1, %r3, %r16;
	setp.ge.s32	%p2, %r6, %r17;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB8_5;

	mad.lo.s32 	%r7, %r6, %r16, %r3;
	mov.f32 	%f7, 0f00000000;
	setp.lt.s32	%p4, %r15, 1;
	@%p4 bra 	BB8_4;

	mad.lo.s32 	%r27, %r16, %r6, %r3;
	mul.lo.s32 	%r28, %r15, %r27;
	shl.b32 	%r29, %r28, 2;
	add.s32 	%r32, %r14, %r29;
	mov.f32 	%f7, 0f00000000;
	mov.u32 	%r33, 0;

BB8_3:
	ld.global.f32 	%f6, [%r32];
	add.f32 	%f7, %f7, %f6;
	add.s32 	%r32, %r32, 4;
	add.s32 	%r33, %r33, 1;
	setp.lt.s32	%p5, %r33, %r15;
	@%p5 bra 	BB8_3;

BB8_4:
	shl.b32 	%r30, %r7, 2;
	add.s32 	%r31, %r13, %r30;
	st.global.f32 	[%r31], %f7;

BB8_5:
	ret;
}

	// .globl	CalculateRowSums
.entry CalculateRowSums(
	.param .u32 .ptr .global .align 4 CalculateRowSums_param_0,
	.param .u32 .ptr .global .align 4 CalculateRowSums_param_1,
	.param .u32 CalculateRowSums_param_2,
	.param .u32 CalculateRowSums_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<24>;


	ld.param.u32 	%r9, [CalculateRowSums_param_0];
	ld.param.u32 	%r10, [CalculateRowSums_param_1];
	ld.param.u32 	%r11, [CalculateRowSums_param_2];
	ld.param.u32 	%r12, [CalculateRowSums_param_3];
	mov.b32	%r13, %envreg3;
	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r15, %ntid.x;
	mad.lo.s32 	%r1, %r14, %r15, %r13;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r3, %r1, %r2;
	setp.ge.s32	%p1, %r3, %r12;
	@%p1 bra 	BB9_5;

	mov.f32 	%f7, 0f00000000;
	setp.lt.s32	%p2, %r11, 1;
	@%p2 bra 	BB9_4;

	mul.lo.s32 	%r18, %r11, %r3;
	shl.b32 	%r19, %r18, 2;
	add.s32 	%r22, %r10, %r19;
	mov.f32 	%f7, 0f00000000;
	mov.u32 	%r23, 0;

BB9_3:
	ld.global.f32 	%f6, [%r22];
	add.f32 	%f7, %f7, %f6;
	add.s32 	%r22, %r22, 4;
	add.s32 	%r23, %r23, 1;
	setp.lt.s32	%p3, %r23, %r11;
	@%p3 bra 	BB9_3;

BB9_4:
	shl.b32 	%r20, %r3, 2;
	add.s32 	%r21, %r9, %r20;
	st.global.f32 	[%r21], %f7;

BB9_5:
	ret;
}

	// .globl	CalculateColumnMaxs
.entry CalculateColumnMaxs(
	.param .u32 .ptr .global .align 4 CalculateColumnMaxs_param_0,
	.param .u32 .ptr .global .align 4 CalculateColumnMaxs_param_1,
	.param .u32 CalculateColumnMaxs_param_2,
	.param .u32 CalculateColumnMaxs_param_3,
	.param .u32 CalculateColumnMaxs_param_4
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<34>;


	ld.param.u32 	%r13, [CalculateColumnMaxs_param_0];
	ld.param.u32 	%r14, [CalculateColumnMaxs_param_1];
	ld.param.u32 	%r15, [CalculateColumnMaxs_param_2];
	ld.param.u32 	%r16, [CalculateColumnMaxs_param_3];
	ld.param.u32 	%r17, [CalculateColumnMaxs_param_4];
	mov.b32	%r18, %envreg3;
	mov.u32 	%r19, %ctaid.x;
	mov.u32 	%r20, %ntid.x;
	mad.lo.s32 	%r1, %r19, %r20, %r18;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r3, %r1, %r2;
	mov.u32 	%r21, %ctaid.y;
	mov.u32 	%r22, %ntid.y;
	mov.b32	%r23, %envreg4;
	mad.lo.s32 	%r4, %r21, %r22, %r23;
	mov.u32 	%r5, %tid.y;
	add.s32 	%r6, %r4, %r5;
	setp.ge.s32	%p1, %r3, %r16;
	setp.ge.s32	%p2, %r6, %r17;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB10_5;

	mad.lo.s32 	%r7, %r6, %r16, %r3;
	mov.f32 	%f7, 0fC61C4000;
	setp.lt.s32	%p4, %r15, 1;
	@%p4 bra 	BB10_4;

	mad.lo.s32 	%r27, %r16, %r6, %r3;
	mul.lo.s32 	%r28, %r15, %r27;
	shl.b32 	%r29, %r28, 2;
	add.s32 	%r32, %r14, %r29;
	mov.f32 	%f7, 0fC61C4000;
	mov.u32 	%r33, 0;

BB10_3:
	ld.global.f32 	%f6, [%r32];
	setp.gt.f32	%p5, %f7, %f6;
	selp.f32	%f7, %f7, %f6, %p5;
	add.s32 	%r32, %r32, 4;
	add.s32 	%r33, %r33, 1;
	setp.lt.s32	%p6, %r33, %r15;
	@%p6 bra 	BB10_3;

BB10_4:
	shl.b32 	%r30, %r7, 2;
	add.s32 	%r31, %r13, %r30;
	st.global.f32 	[%r31], %f7;

BB10_5:
	ret;
}

	// .globl	CalculateRowMaxs
.entry CalculateRowMaxs(
	.param .u32 .ptr .global .align 4 CalculateRowMaxs_param_0,
	.param .u32 .ptr .global .align 4 CalculateRowMaxs_param_1,
	.param .u32 CalculateRowMaxs_param_2,
	.param .u32 CalculateRowMaxs_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<24>;


	ld.param.u32 	%r9, [CalculateRowMaxs_param_0];
	ld.param.u32 	%r10, [CalculateRowMaxs_param_1];
	ld.param.u32 	%r11, [CalculateRowMaxs_param_2];
	ld.param.u32 	%r12, [CalculateRowMaxs_param_3];
	mov.b32	%r13, %envreg3;
	mov.u32 	%r14, %ctaid.x;
	mov.u32 	%r15, %ntid.x;
	mad.lo.s32 	%r1, %r14, %r15, %r13;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r3, %r1, %r2;
	setp.ge.s32	%p1, %r3, %r12;
	@%p1 bra 	BB11_5;

	mov.f32 	%f7, 0fC61C4000;
	setp.lt.s32	%p2, %r11, 1;
	@%p2 bra 	BB11_4;

	mul.lo.s32 	%r18, %r11, %r3;
	shl.b32 	%r19, %r18, 2;
	add.s32 	%r22, %r10, %r19;
	mov.f32 	%f7, 0fC61C4000;
	mov.u32 	%r23, 0;

BB11_3:
	ld.global.f32 	%f6, [%r22];
	setp.gt.f32	%p3, %f7, %f6;
	selp.f32	%f7, %f7, %f6, %p3;
	add.s32 	%r22, %r22, 4;
	add.s32 	%r23, %r23, 1;
	setp.lt.s32	%p4, %r23, %r11;
	@%p4 bra 	BB11_3;

BB11_4:
	shl.b32 	%r20, %r3, 2;
	add.s32 	%r21, %r9, %r20;
	st.global.f32 	[%r21], %f7;

BB11_5:
	ret;
}

	// .globl	CalculateMaxAtomic
.entry CalculateMaxAtomic(
	.param .u32 .ptr .global .align 4 CalculateMaxAtomic_param_0,
	.param .u32 .ptr .global .align 4 CalculateMaxAtomic_param_1,
	.param .u32 .ptr .global .align 4 CalculateMaxAtomic_param_2,
	.param .u32 CalculateMaxAtomic_param_3,
	.param .u32 CalculateMaxAtomic_param_4,
	.param .u32 CalculateMaxAtomic_param_5
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<33>;


	ld.param.u32 	%r5, [CalculateMaxAtomic_param_0];
	ld.param.u32 	%r6, [CalculateMaxAtomic_param_1];
	ld.param.u32 	%r7, [CalculateMaxAtomic_param_2];
	ld.param.u32 	%r8, [CalculateMaxAtomic_param_3];
	ld.param.u32 	%r9, [CalculateMaxAtomic_param_4];
	ld.param.u32 	%r10, [CalculateMaxAtomic_param_5];
	mov.b32	%r11, %envreg3;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %ntid.x;
	mad.lo.s32 	%r14, %r12, %r13, %r11;
	mov.u32 	%r15, %tid.x;
	add.s32 	%r1, %r14, %r15;
	mov.u32 	%r16, %ctaid.y;
	mov.u32 	%r17, %ntid.y;
	mov.b32	%r18, %envreg4;
	mad.lo.s32 	%r19, %r16, %r17, %r18;
	mov.u32 	%r20, %tid.y;
	add.s32 	%r2, %r19, %r20;
	mov.u32 	%r21, %ctaid.z;
	mov.u32 	%r22, %ntid.z;
	mov.b32	%r23, %envreg5;
	mad.lo.s32 	%r24, %r21, %r22, %r23;
	mov.u32 	%r25, %tid.z;
	add.s32 	%r3, %r24, %r25;
	setp.ge.s32	%p1, %r1, %r8;
	setp.ge.s32	%p2, %r2, %r9;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r10;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB12_3;

	mad.lo.s32 	%r26, %r3, %r9, %r2;
	mad.lo.s32 	%r4, %r26, %r8, %r1;
	shl.b32 	%r27, %r4, 2;
	add.s32 	%r28, %r7, %r27;
	ld.global.f32 	%f1, [%r28];
	setp.neu.f32	%p6, %f1, 0f3F800000;
	@%p6 bra 	BB12_3;

	add.s32 	%r30, %r6, %r27;
	ld.global.f32 	%f2, [%r30];
	mul.f32 	%f3, %f2, 0f461C4000;
	cvt.rzi.s32.f32	%r31, %f3;
	atom.global.max.s32 	%r32, [%r5], %r31;

BB12_3:
	ret;
}

	// .globl	ThresholdVolume
.entry ThresholdVolume(
	.param .u32 .ptr .global .align 4 ThresholdVolume_param_0,
	.param .u32 .ptr .global .align 4 ThresholdVolume_param_1,
	.param .f32 ThresholdVolume_param_2,
	.param .u32 ThresholdVolume_param_3,
	.param .u32 ThresholdVolume_param_4,
	.param .u32 ThresholdVolume_param_5
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<31>;


	ld.param.u32 	%r5, [ThresholdVolume_param_0];
	ld.param.u32 	%r6, [ThresholdVolume_param_1];
	ld.param.f32 	%f1, [ThresholdVolume_param_2];
	ld.param.u32 	%r7, [ThresholdVolume_param_3];
	ld.param.u32 	%r8, [ThresholdVolume_param_4];
	ld.param.u32 	%r9, [ThresholdVolume_param_5];
	mov.b32	%r10, %envreg3;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %ntid.x;
	mad.lo.s32 	%r13, %r11, %r12, %r10;
	mov.u32 	%r14, %tid.x;
	add.s32 	%r1, %r13, %r14;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.b32	%r17, %envreg4;
	mad.lo.s32 	%r18, %r15, %r16, %r17;
	mov.u32 	%r19, %tid.y;
	add.s32 	%r2, %r18, %r19;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %ntid.z;
	mov.b32	%r22, %envreg5;
	mad.lo.s32 	%r23, %r20, %r21, %r22;
	mov.u32 	%r24, %tid.z;
	add.s32 	%r3, %r23, %r24;
	setp.ge.s32	%p1, %r1, %r7;
	setp.ge.s32	%p2, %r2, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB13_4;

	mad.lo.s32 	%r25, %r3, %r8, %r2;
	mad.lo.s32 	%r26, %r25, %r7, %r1;
	shl.b32 	%r27, %r26, 2;
	add.s32 	%r28, %r6, %r27;
	ld.global.f32 	%f2, [%r28];
	setp.gt.f32	%p6, %f2, %f1;
	add.s32 	%r4, %r5, %r27;
	@%p6 bra 	BB13_3;
	bra.uni 	BB13_2;

BB13_3:
	mov.u32 	%r30, 1065353216;
	st.global.u32 	[%r4], %r30;
	bra.uni 	BB13_4;

BB13_2:
	mov.u32 	%r29, 981668463;
	st.global.u32 	[%r4], %r29;

BB13_4:
	ret;
}

	// .globl	RemoveMean
.entry RemoveMean(
	.param .u32 .ptr .global .align 4 RemoveMean_param_0,
	.param .u32 RemoveMean_param_1,
	.param .u32 RemoveMean_param_2,
	.param .u32 RemoveMean_param_3,
	.param .u32 RemoveMean_param_4
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<58>;


	ld.param.u32 	%r19, [RemoveMean_param_0];
	ld.param.u32 	%r20, [RemoveMean_param_1];
	ld.param.u32 	%r21, [RemoveMean_param_2];
	ld.param.u32 	%r22, [RemoveMean_param_3];
	ld.param.u32 	%r23, [RemoveMean_param_4];
	mov.b32	%r24, %envreg3;
	mov.u32 	%r25, %ctaid.x;
	mov.u32 	%r26, %ntid.x;
	mad.lo.s32 	%r1, %r25, %r26, %r24;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r27, %r1, %r2;
	mov.u32 	%r28, %ctaid.y;
	mov.u32 	%r29, %ntid.y;
	mov.b32	%r30, %envreg4;
	mad.lo.s32 	%r3, %r28, %r29, %r30;
	mov.u32 	%r4, %tid.y;
	add.s32 	%r31, %r3, %r4;
	mov.u32 	%r32, %ctaid.z;
	mov.u32 	%r33, %ntid.z;
	mov.b32	%r34, %envreg5;
	mad.lo.s32 	%r5, %r32, %r33, %r34;
	mov.u32 	%r6, %tid.z;
	add.s32 	%r35, %r5, %r6;
	setp.ge.s32	%p1, %r27, %r20;
	setp.ge.s32	%p2, %r31, %r21;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r35, %r22;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB14_7;

	mov.f32 	%f11, 0f00000000;
	setp.lt.s32	%p6, %r23, 1;
	@%p6 bra 	BB14_4;

	mad.lo.s32 	%r40, %r21, %r35, %r31;
	mad.lo.s32 	%r41, %r20, %r40, %r27;
	shl.b32 	%r42, %r41, 2;
	add.s32 	%r54, %r19, %r42;
	mul.lo.s32 	%r43, %r22, %r21;
	mul.lo.s32 	%r44, %r43, %r20;
	shl.b32 	%r8, %r44, 2;
	mov.f32 	%f11, 0f00000000;
	mov.u32 	%r55, 0;

BB14_3:
	ld.global.f32 	%f7, [%r54];
	add.f32 	%f11, %f11, %f7;
	add.s32 	%r54, %r54, %r8;
	add.s32 	%r55, %r55, 1;
	setp.lt.s32	%p7, %r55, %r23;
	@%p7 bra 	BB14_3;

BB14_4:
	@%p6 bra 	BB14_7;

	cvt.rn.f32.s32	%f8, %r23;
	div.full.f32 	%f4, %f11, %f8;
	mad.lo.s32 	%r49, %r21, %r35, %r31;
	mad.lo.s32 	%r50, %r20, %r49, %r27;
	shl.b32 	%r51, %r50, 2;
	add.s32 	%r56, %r19, %r51;
	mul.lo.s32 	%r52, %r22, %r21;
	mul.lo.s32 	%r53, %r52, %r20;
	shl.b32 	%r14, %r53, 2;
	mov.u32 	%r57, 0;

BB14_6:
	ld.global.f32 	%f9, [%r56];
	sub.f32 	%f10, %f9, %f4;
	st.global.f32 	[%r56], %f10;
	add.s32 	%r56, %r56, %r14;
	add.s32 	%r57, %r57, 1;
	setp.lt.s32	%p9, %r57, %r23;
	@%p9 bra 	BB14_6;

BB14_7:
	ret;
}

	// .globl	AddVolume
.entry AddVolume(
	.param .u32 .ptr .global .align 4 AddVolume_param_0,
	.param .f32 AddVolume_param_1,
	.param .u32 AddVolume_param_2,
	.param .u32 AddVolume_param_3,
	.param .u32 AddVolume_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<27>;


	ld.param.u32 	%r4, [AddVolume_param_0];
	ld.param.f32 	%f1, [AddVolume_param_1];
	ld.param.u32 	%r5, [AddVolume_param_2];
	ld.param.u32 	%r6, [AddVolume_param_3];
	ld.param.u32 	%r7, [AddVolume_param_4];
	mov.b32	%r8, %envreg3;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %ntid.x;
	mad.lo.s32 	%r11, %r9, %r10, %r8;
	mov.u32 	%r12, %tid.x;
	add.s32 	%r1, %r11, %r12;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %ntid.y;
	mov.b32	%r15, %envreg4;
	mad.lo.s32 	%r16, %r13, %r14, %r15;
	mov.u32 	%r17, %tid.y;
	add.s32 	%r2, %r16, %r17;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %ntid.z;
	mov.b32	%r20, %envreg5;
	mad.lo.s32 	%r21, %r18, %r19, %r20;
	mov.u32 	%r22, %tid.z;
	add.s32 	%r3, %r21, %r22;
	setp.ge.s32	%p1, %r1, %r5;
	setp.ge.s32	%p2, %r2, %r6;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r7;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB15_2;

	mad.lo.s32 	%r23, %r3, %r6, %r2;
	mad.lo.s32 	%r24, %r23, %r5, %r1;
	shl.b32 	%r25, %r24, 2;
	add.s32 	%r26, %r4, %r25;
	ld.global.f32 	%f2, [%r26];
	add.f32 	%f3, %f2, %f1;
	st.global.f32 	[%r26], %f3;

BB15_2:
	ret;
}

	// .globl	AddVolumes
.entry AddVolumes(
	.param .u32 .ptr .global .align 4 AddVolumes_param_0,
	.param .u32 .ptr .global .align 4 AddVolumes_param_1,
	.param .u32 .ptr .global .align 4 AddVolumes_param_2,
	.param .u32 AddVolumes_param_3,
	.param .u32 AddVolumes_param_4,
	.param .u32 AddVolumes_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<31>;


	ld.param.u32 	%r4, [AddVolumes_param_0];
	ld.param.u32 	%r5, [AddVolumes_param_1];
	ld.param.u32 	%r6, [AddVolumes_param_2];
	ld.param.u32 	%r7, [AddVolumes_param_3];
	ld.param.u32 	%r8, [AddVolumes_param_4];
	ld.param.u32 	%r9, [AddVolumes_param_5];
	mov.b32	%r10, %envreg3;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %ntid.x;
	mad.lo.s32 	%r13, %r11, %r12, %r10;
	mov.u32 	%r14, %tid.x;
	add.s32 	%r1, %r13, %r14;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.b32	%r17, %envreg4;
	mad.lo.s32 	%r18, %r15, %r16, %r17;
	mov.u32 	%r19, %tid.y;
	add.s32 	%r2, %r18, %r19;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %ntid.z;
	mov.b32	%r22, %envreg5;
	mad.lo.s32 	%r23, %r20, %r21, %r22;
	mov.u32 	%r24, %tid.z;
	add.s32 	%r3, %r23, %r24;
	setp.ge.s32	%p1, %r1, %r7;
	setp.ge.s32	%p2, %r2, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB16_2;

	mad.lo.s32 	%r25, %r3, %r8, %r2;
	mad.lo.s32 	%r26, %r25, %r7, %r1;
	shl.b32 	%r27, %r26, 2;
	add.s32 	%r28, %r5, %r27;
	add.s32 	%r29, %r6, %r27;
	ld.global.f32 	%f1, [%r29];
	ld.global.f32 	%f2, [%r28];
	add.f32 	%f3, %f2, %f1;
	add.s32 	%r30, %r4, %r27;
	st.global.f32 	[%r30], %f3;

BB16_2:
	ret;
}

	// .globl	SubtractVolumes
.entry SubtractVolumes(
	.param .u32 .ptr .global .align 4 SubtractVolumes_param_0,
	.param .u32 .ptr .global .align 4 SubtractVolumes_param_1,
	.param .u32 .ptr .global .align 4 SubtractVolumes_param_2,
	.param .u32 SubtractVolumes_param_3,
	.param .u32 SubtractVolumes_param_4,
	.param .u32 SubtractVolumes_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<31>;


	ld.param.u32 	%r4, [SubtractVolumes_param_0];
	ld.param.u32 	%r5, [SubtractVolumes_param_1];
	ld.param.u32 	%r6, [SubtractVolumes_param_2];
	ld.param.u32 	%r7, [SubtractVolumes_param_3];
	ld.param.u32 	%r8, [SubtractVolumes_param_4];
	ld.param.u32 	%r9, [SubtractVolumes_param_5];
	mov.b32	%r10, %envreg3;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %ntid.x;
	mad.lo.s32 	%r13, %r11, %r12, %r10;
	mov.u32 	%r14, %tid.x;
	add.s32 	%r1, %r13, %r14;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.b32	%r17, %envreg4;
	mad.lo.s32 	%r18, %r15, %r16, %r17;
	mov.u32 	%r19, %tid.y;
	add.s32 	%r2, %r18, %r19;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %ntid.z;
	mov.b32	%r22, %envreg5;
	mad.lo.s32 	%r23, %r20, %r21, %r22;
	mov.u32 	%r24, %tid.z;
	add.s32 	%r3, %r23, %r24;
	setp.ge.s32	%p1, %r1, %r7;
	setp.ge.s32	%p2, %r2, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB17_2;

	mad.lo.s32 	%r25, %r3, %r8, %r2;
	mad.lo.s32 	%r26, %r25, %r7, %r1;
	shl.b32 	%r27, %r26, 2;
	add.s32 	%r28, %r5, %r27;
	add.s32 	%r29, %r6, %r27;
	ld.global.f32 	%f1, [%r29];
	ld.global.f32 	%f2, [%r28];
	sub.f32 	%f3, %f2, %f1;
	add.s32 	%r30, %r4, %r27;
	st.global.f32 	[%r30], %f3;

BB17_2:
	ret;
}

	// .globl	AddVolumesOverwrite
.entry AddVolumesOverwrite(
	.param .u32 .ptr .global .align 4 AddVolumesOverwrite_param_0,
	.param .u32 .ptr .global .align 4 AddVolumesOverwrite_param_1,
	.param .u32 AddVolumesOverwrite_param_2,
	.param .u32 AddVolumesOverwrite_param_3,
	.param .u32 AddVolumesOverwrite_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<29>;


	ld.param.u32 	%r4, [AddVolumesOverwrite_param_0];
	ld.param.u32 	%r5, [AddVolumesOverwrite_param_1];
	ld.param.u32 	%r6, [AddVolumesOverwrite_param_2];
	ld.param.u32 	%r7, [AddVolumesOverwrite_param_3];
	ld.param.u32 	%r8, [AddVolumesOverwrite_param_4];
	mov.b32	%r9, %envreg3;
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mad.lo.s32 	%r12, %r10, %r11, %r9;
	mov.u32 	%r13, %tid.x;
	add.s32 	%r1, %r12, %r13;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %ntid.y;
	mov.b32	%r16, %envreg4;
	mad.lo.s32 	%r17, %r14, %r15, %r16;
	mov.u32 	%r18, %tid.y;
	add.s32 	%r2, %r17, %r18;
	mov.u32 	%r19, %ctaid.z;
	mov.u32 	%r20, %ntid.z;
	mov.b32	%r21, %envreg5;
	mad.lo.s32 	%r22, %r19, %r20, %r21;
	mov.u32 	%r23, %tid.z;
	add.s32 	%r3, %r22, %r23;
	setp.ge.s32	%p1, %r1, %r6;
	setp.ge.s32	%p2, %r2, %r7;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r8;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB18_2;

	mad.lo.s32 	%r24, %r3, %r7, %r2;
	mad.lo.s32 	%r25, %r24, %r6, %r1;
	shl.b32 	%r26, %r25, 2;
	add.s32 	%r27, %r4, %r26;
	add.s32 	%r28, %r5, %r26;
	ld.global.f32 	%f1, [%r28];
	ld.global.f32 	%f2, [%r27];
	add.f32 	%f3, %f2, %f1;
	st.global.f32 	[%r27], %f3;

BB18_2:
	ret;
}

	// .globl	SubtractVolumesOverwrite
.entry SubtractVolumesOverwrite(
	.param .u32 .ptr .global .align 4 SubtractVolumesOverwrite_param_0,
	.param .u32 .ptr .global .align 4 SubtractVolumesOverwrite_param_1,
	.param .u32 SubtractVolumesOverwrite_param_2,
	.param .u32 SubtractVolumesOverwrite_param_3,
	.param .u32 SubtractVolumesOverwrite_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<29>;


	ld.param.u32 	%r4, [SubtractVolumesOverwrite_param_0];
	ld.param.u32 	%r5, [SubtractVolumesOverwrite_param_1];
	ld.param.u32 	%r6, [SubtractVolumesOverwrite_param_2];
	ld.param.u32 	%r7, [SubtractVolumesOverwrite_param_3];
	ld.param.u32 	%r8, [SubtractVolumesOverwrite_param_4];
	mov.b32	%r9, %envreg3;
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mad.lo.s32 	%r12, %r10, %r11, %r9;
	mov.u32 	%r13, %tid.x;
	add.s32 	%r1, %r12, %r13;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %ntid.y;
	mov.b32	%r16, %envreg4;
	mad.lo.s32 	%r17, %r14, %r15, %r16;
	mov.u32 	%r18, %tid.y;
	add.s32 	%r2, %r17, %r18;
	mov.u32 	%r19, %ctaid.z;
	mov.u32 	%r20, %ntid.z;
	mov.b32	%r21, %envreg5;
	mad.lo.s32 	%r22, %r19, %r20, %r21;
	mov.u32 	%r23, %tid.z;
	add.s32 	%r3, %r22, %r23;
	setp.ge.s32	%p1, %r1, %r6;
	setp.ge.s32	%p2, %r2, %r7;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r8;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB19_2;

	mad.lo.s32 	%r24, %r3, %r7, %r2;
	mad.lo.s32 	%r25, %r24, %r6, %r1;
	shl.b32 	%r26, %r25, 2;
	add.s32 	%r27, %r4, %r26;
	add.s32 	%r28, %r5, %r26;
	ld.global.f32 	%f1, [%r28];
	ld.global.f32 	%f2, [%r27];
	sub.f32 	%f3, %f2, %f1;
	st.global.f32 	[%r27], %f3;

BB19_2:
	ret;
}

	// .globl	SubtractVolumesOverwriteDouble
.entry SubtractVolumesOverwriteDouble(
	.param .u32 .ptr .global .align 8 SubtractVolumesOverwriteDouble_param_0,
	.param .u32 .ptr .global .align 8 SubtractVolumesOverwriteDouble_param_1,
	.param .u32 SubtractVolumesOverwriteDouble_param_2,
	.param .u32 SubtractVolumesOverwriteDouble_param_3,
	.param .u32 SubtractVolumesOverwriteDouble_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .b32 	%r<29>;
	.reg .f64 	%fd<4>;


	ld.param.u32 	%r4, [SubtractVolumesOverwriteDouble_param_0];
	ld.param.u32 	%r5, [SubtractVolumesOverwriteDouble_param_1];
	ld.param.u32 	%r6, [SubtractVolumesOverwriteDouble_param_2];
	ld.param.u32 	%r7, [SubtractVolumesOverwriteDouble_param_3];
	ld.param.u32 	%r8, [SubtractVolumesOverwriteDouble_param_4];
	mov.b32	%r9, %envreg3;
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mad.lo.s32 	%r12, %r10, %r11, %r9;
	mov.u32 	%r13, %tid.x;
	add.s32 	%r1, %r12, %r13;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %ntid.y;
	mov.b32	%r16, %envreg4;
	mad.lo.s32 	%r17, %r14, %r15, %r16;
	mov.u32 	%r18, %tid.y;
	add.s32 	%r2, %r17, %r18;
	mov.u32 	%r19, %ctaid.z;
	mov.u32 	%r20, %ntid.z;
	mov.b32	%r21, %envreg5;
	mad.lo.s32 	%r22, %r19, %r20, %r21;
	mov.u32 	%r23, %tid.z;
	add.s32 	%r3, %r22, %r23;
	setp.ge.s32	%p1, %r1, %r6;
	setp.ge.s32	%p2, %r2, %r7;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r8;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB20_2;

	mad.lo.s32 	%r24, %r3, %r7, %r2;
	mad.lo.s32 	%r25, %r24, %r6, %r1;
	shl.b32 	%r26, %r25, 3;
	add.s32 	%r27, %r4, %r26;
	add.s32 	%r28, %r5, %r26;
	ld.global.f64 	%fd1, [%r28];
	ld.global.f64 	%fd2, [%r27];
	sub.f64 	%fd3, %fd2, %fd1;
	st.global.f64 	[%r27], %fd3;

BB20_2:
	ret;
}

	// .globl	MultiplyVolume
.entry MultiplyVolume(
	.param .u32 .ptr .global .align 4 MultiplyVolume_param_0,
	.param .f32 MultiplyVolume_param_1,
	.param .u32 MultiplyVolume_param_2,
	.param .u32 MultiplyVolume_param_3,
	.param .u32 MultiplyVolume_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<27>;


	ld.param.u32 	%r4, [MultiplyVolume_param_0];
	ld.param.f32 	%f1, [MultiplyVolume_param_1];
	ld.param.u32 	%r5, [MultiplyVolume_param_2];
	ld.param.u32 	%r6, [MultiplyVolume_param_3];
	ld.param.u32 	%r7, [MultiplyVolume_param_4];
	mov.b32	%r8, %envreg3;
	mov.u32 	%r9, %ctaid.x;
	mov.u32 	%r10, %ntid.x;
	mad.lo.s32 	%r11, %r9, %r10, %r8;
	mov.u32 	%r12, %tid.x;
	add.s32 	%r1, %r11, %r12;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %ntid.y;
	mov.b32	%r15, %envreg4;
	mad.lo.s32 	%r16, %r13, %r14, %r15;
	mov.u32 	%r17, %tid.y;
	add.s32 	%r2, %r16, %r17;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %ntid.z;
	mov.b32	%r20, %envreg5;
	mad.lo.s32 	%r21, %r18, %r19, %r20;
	mov.u32 	%r22, %tid.z;
	add.s32 	%r3, %r21, %r22;
	setp.ge.s32	%p1, %r1, %r5;
	setp.ge.s32	%p2, %r2, %r6;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r7;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB21_2;

	mad.lo.s32 	%r23, %r3, %r6, %r2;
	mad.lo.s32 	%r24, %r23, %r5, %r1;
	shl.b32 	%r25, %r24, 2;
	add.s32 	%r26, %r4, %r25;
	ld.global.f32 	%f2, [%r26];
	mul.f32 	%f3, %f2, %f1;
	st.global.f32 	[%r26], %f3;

BB21_2:
	ret;
}

	// .globl	MultiplyVolumes
.entry MultiplyVolumes(
	.param .u32 .ptr .global .align 4 MultiplyVolumes_param_0,
	.param .u32 .ptr .global .align 4 MultiplyVolumes_param_1,
	.param .u32 .ptr .global .align 4 MultiplyVolumes_param_2,
	.param .u32 MultiplyVolumes_param_3,
	.param .u32 MultiplyVolumes_param_4,
	.param .u32 MultiplyVolumes_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<31>;


	ld.param.u32 	%r4, [MultiplyVolumes_param_0];
	ld.param.u32 	%r5, [MultiplyVolumes_param_1];
	ld.param.u32 	%r6, [MultiplyVolumes_param_2];
	ld.param.u32 	%r7, [MultiplyVolumes_param_3];
	ld.param.u32 	%r8, [MultiplyVolumes_param_4];
	ld.param.u32 	%r9, [MultiplyVolumes_param_5];
	mov.b32	%r10, %envreg3;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %ntid.x;
	mad.lo.s32 	%r13, %r11, %r12, %r10;
	mov.u32 	%r14, %tid.x;
	add.s32 	%r1, %r13, %r14;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.b32	%r17, %envreg4;
	mad.lo.s32 	%r18, %r15, %r16, %r17;
	mov.u32 	%r19, %tid.y;
	add.s32 	%r2, %r18, %r19;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %ntid.z;
	mov.b32	%r22, %envreg5;
	mad.lo.s32 	%r23, %r20, %r21, %r22;
	mov.u32 	%r24, %tid.z;
	add.s32 	%r3, %r23, %r24;
	setp.ge.s32	%p1, %r1, %r7;
	setp.ge.s32	%p2, %r2, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB22_2;

	mad.lo.s32 	%r25, %r3, %r8, %r2;
	mad.lo.s32 	%r26, %r25, %r7, %r1;
	shl.b32 	%r27, %r26, 2;
	add.s32 	%r28, %r5, %r27;
	add.s32 	%r29, %r6, %r27;
	ld.global.f32 	%f1, [%r29];
	ld.global.f32 	%f2, [%r28];
	mul.f32 	%f3, %f2, %f1;
	add.s32 	%r30, %r4, %r27;
	st.global.f32 	[%r30], %f3;

BB22_2:
	ret;
}

	// .globl	MultiplyVolumesOverwrite
.entry MultiplyVolumesOverwrite(
	.param .u32 .ptr .global .align 4 MultiplyVolumesOverwrite_param_0,
	.param .u32 .ptr .global .align 4 MultiplyVolumesOverwrite_param_1,
	.param .u32 MultiplyVolumesOverwrite_param_2,
	.param .u32 MultiplyVolumesOverwrite_param_3,
	.param .u32 MultiplyVolumesOverwrite_param_4,
	.param .u32 MultiplyVolumesOverwrite_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<34>;


	ld.param.u32 	%r4, [MultiplyVolumesOverwrite_param_0];
	ld.param.u32 	%r5, [MultiplyVolumesOverwrite_param_1];
	ld.param.u32 	%r6, [MultiplyVolumesOverwrite_param_2];
	ld.param.u32 	%r7, [MultiplyVolumesOverwrite_param_3];
	ld.param.u32 	%r8, [MultiplyVolumesOverwrite_param_4];
	ld.param.u32 	%r9, [MultiplyVolumesOverwrite_param_5];
	mov.b32	%r10, %envreg3;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %ntid.x;
	mad.lo.s32 	%r13, %r11, %r12, %r10;
	mov.u32 	%r14, %tid.x;
	add.s32 	%r1, %r13, %r14;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.b32	%r17, %envreg4;
	mad.lo.s32 	%r18, %r15, %r16, %r17;
	mov.u32 	%r19, %tid.y;
	add.s32 	%r2, %r18, %r19;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %ntid.z;
	mov.b32	%r22, %envreg5;
	mad.lo.s32 	%r23, %r20, %r21, %r22;
	mov.u32 	%r24, %tid.z;
	add.s32 	%r3, %r23, %r24;
	setp.ge.s32	%p1, %r1, %r6;
	setp.ge.s32	%p2, %r2, %r7;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r8;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB23_2;

	mad.lo.s32 	%r25, %r3, %r7, %r2;
	mad.lo.s32 	%r26, %r25, %r6, %r1;
	mad.lo.s32 	%r27, %r9, %r8, %r3;
	mad.lo.s32 	%r28, %r27, %r7, %r2;
	mad.lo.s32 	%r29, %r28, %r6, %r1;
	shl.b32 	%r30, %r29, 2;
	add.s32 	%r31, %r4, %r30;
	shl.b32 	%r32, %r26, 2;
	add.s32 	%r33, %r5, %r32;
	ld.global.f32 	%f1, [%r33];
	ld.global.f32 	%f2, [%r31];
	mul.f32 	%f3, %f2, %f1;
	st.global.f32 	[%r31], %f3;

BB23_2:
	ret;
}

	// .globl	MultiplyVolumesOverwriteDouble
.entry MultiplyVolumesOverwriteDouble(
	.param .u32 .ptr .global .align 8 MultiplyVolumesOverwriteDouble_param_0,
	.param .u32 .ptr .global .align 8 MultiplyVolumesOverwriteDouble_param_1,
	.param .u32 MultiplyVolumesOverwriteDouble_param_2,
	.param .u32 MultiplyVolumesOverwriteDouble_param_3,
	.param .u32 MultiplyVolumesOverwriteDouble_param_4,
	.param .u32 MultiplyVolumesOverwriteDouble_param_5
)
{
	.reg .pred 	%p<6>;
	.reg .b32 	%r<34>;
	.reg .f64 	%fd<4>;


	ld.param.u32 	%r4, [MultiplyVolumesOverwriteDouble_param_0];
	ld.param.u32 	%r5, [MultiplyVolumesOverwriteDouble_param_1];
	ld.param.u32 	%r6, [MultiplyVolumesOverwriteDouble_param_2];
	ld.param.u32 	%r7, [MultiplyVolumesOverwriteDouble_param_3];
	ld.param.u32 	%r8, [MultiplyVolumesOverwriteDouble_param_4];
	ld.param.u32 	%r9, [MultiplyVolumesOverwriteDouble_param_5];
	mov.b32	%r10, %envreg3;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %ntid.x;
	mad.lo.s32 	%r13, %r11, %r12, %r10;
	mov.u32 	%r14, %tid.x;
	add.s32 	%r1, %r13, %r14;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %ntid.y;
	mov.b32	%r17, %envreg4;
	mad.lo.s32 	%r18, %r15, %r16, %r17;
	mov.u32 	%r19, %tid.y;
	add.s32 	%r2, %r18, %r19;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %ntid.z;
	mov.b32	%r22, %envreg5;
	mad.lo.s32 	%r23, %r20, %r21, %r22;
	mov.u32 	%r24, %tid.z;
	add.s32 	%r3, %r23, %r24;
	setp.ge.s32	%p1, %r1, %r6;
	setp.ge.s32	%p2, %r2, %r7;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r8;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB24_2;

	mad.lo.s32 	%r25, %r3, %r7, %r2;
	mad.lo.s32 	%r26, %r25, %r6, %r1;
	mad.lo.s32 	%r27, %r9, %r8, %r3;
	mad.lo.s32 	%r28, %r27, %r7, %r2;
	mad.lo.s32 	%r29, %r28, %r6, %r1;
	shl.b32 	%r30, %r29, 3;
	add.s32 	%r31, %r4, %r30;
	shl.b32 	%r32, %r26, 3;
	add.s32 	%r33, %r5, %r32;
	ld.global.f64 	%fd1, [%r33];
	ld.global.f64 	%fd2, [%r31];
	mul.f64 	%fd3, %fd2, %fd1;
	st.global.f64 	[%r31], %fd3;

BB24_2:
	ret;
}

	// .globl	MemsetInt
.entry MemsetInt(
	.param .u32 .ptr .global .align 4 MemsetInt_param_0,
	.param .u32 MemsetInt_param_1,
	.param .u32 MemsetInt_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<12>;


	ld.param.u32 	%r2, [MemsetInt_param_0];
	ld.param.u32 	%r3, [MemsetInt_param_1];
	ld.param.u32 	%r4, [MemsetInt_param_2];
	mov.b32	%r5, %envreg3;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mad.lo.s32 	%r8, %r6, %r7, %r5;
	mov.u32 	%r9, %tid.x;
	add.s32 	%r1, %r8, %r9;
	setp.ge.s32	%p1, %r1, %r4;
	@%p1 bra 	BB25_2;

	shl.b32 	%r10, %r1, 2;
	add.s32 	%r11, %r2, %r10;
	st.global.u32 	[%r11], %r3;

BB25_2:
	ret;
}

	// .globl	Memset
.entry Memset(
	.param .u32 .ptr .global .align 4 Memset_param_0,
	.param .f32 Memset_param_1,
	.param .u32 Memset_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;


	ld.param.u32 	%r2, [Memset_param_0];
	ld.param.f32 	%f1, [Memset_param_1];
	ld.param.u32 	%r3, [Memset_param_2];
	mov.b32	%r4, %envreg3;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mad.lo.s32 	%r7, %r5, %r6, %r4;
	mov.u32 	%r8, %tid.x;
	add.s32 	%r1, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB26_2;

	shl.b32 	%r9, %r1, 2;
	add.s32 	%r10, %r2, %r9;
	st.global.f32 	[%r10], %f1;

BB26_2:
	ret;
}

	// .globl	MemsetDouble
.entry MemsetDouble(
	.param .u32 .ptr .global .align 8 MemsetDouble_param_0,
	.param .f64 MemsetDouble_param_1,
	.param .u32 MemsetDouble_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<2>;


	ld.param.u32 	%r2, [MemsetDouble_param_0];
	ld.param.f64 	%fd1, [MemsetDouble_param_1];
	ld.param.u32 	%r3, [MemsetDouble_param_2];
	mov.b32	%r4, %envreg3;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mad.lo.s32 	%r7, %r5, %r6, %r4;
	mov.u32 	%r8, %tid.x;
	add.s32 	%r1, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB27_2;

	shl.b32 	%r9, %r1, 3;
	add.s32 	%r10, %r2, %r9;
	st.global.f64 	[%r10], %fd1;

BB27_2:
	ret;
}

	// .globl	MemsetFloat2
.entry MemsetFloat2(
	.param .u32 .ptr .global .align 8 MemsetFloat2_param_0,
	.param .f32 MemsetFloat2_param_1,
	.param .u32 MemsetFloat2_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;


	ld.param.u32 	%r2, [MemsetFloat2_param_0];
	ld.param.f32 	%f1, [MemsetFloat2_param_1];
	ld.param.u32 	%r3, [MemsetFloat2_param_2];
	mov.b32	%r4, %envreg3;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %ntid.x;
	mad.lo.s32 	%r7, %r5, %r6, %r4;
	mov.u32 	%r8, %tid.x;
	add.s32 	%r1, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r3;
	@%p1 bra 	BB28_2;

	shl.b32 	%r9, %r1, 3;
	add.s32 	%r10, %r2, %r9;
	st.global.v2.f32 	[%r10], {%f1, %f1};

BB28_2:
	ret;
}

	// .globl	SliceTimingCorrection
.entry SliceTimingCorrection(
	.param .u32 .ptr .global .align 4 SliceTimingCorrection_param_0,
	.param .u32 .ptr .global .align 4 SliceTimingCorrection_param_1,
	.param .f32 SliceTimingCorrection_param_2,
	.param .u32 SliceTimingCorrection_param_3,
	.param .u32 SliceTimingCorrection_param_4,
	.param .u32 SliceTimingCorrection_param_5,
	.param .u32 SliceTimingCorrection_param_6
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<82>;
	.reg .b32 	%r<90>;


	ld.param.u32 	%r33, [SliceTimingCorrection_param_0];
	ld.param.u32 	%r34, [SliceTimingCorrection_param_1];
	ld.param.f32 	%f18, [SliceTimingCorrection_param_2];
	ld.param.u32 	%r35, [SliceTimingCorrection_param_3];
	ld.param.u32 	%r36, [SliceTimingCorrection_param_4];
	ld.param.u32 	%r37, [SliceTimingCorrection_param_6];
	mov.b32	%r38, %envreg3;
	mov.u32 	%r39, %ctaid.x;
	mov.u32 	%r40, %ntid.x;
	mad.lo.s32 	%r1, %r39, %r40, %r38;
	mov.u32 	%r2, %tid.x;
	add.s32 	%r3, %r1, %r2;
	mov.u32 	%r41, %ctaid.y;
	mov.u32 	%r42, %ntid.y;
	mov.b32	%r43, %envreg4;
	mad.lo.s32 	%r4, %r41, %r42, %r43;
	mov.u32 	%r5, %tid.y;
	add.s32 	%r6, %r4, %r5;
	setp.ge.s32	%p1, %r3, %r35;
	setp.ge.s32	%p2, %r6, %r36;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB29_9;

	setp.gt.f32	%p4, %f18, 0f00000000;
	mad.lo.s32 	%r44, %r6, %r35, %r3;
	shl.b32 	%r45, %r44, 2;
	add.s32 	%r7, %r34, %r45;
	add.s32 	%r46, %r6, %r36;
	mul.lo.s32 	%r8, %r46, %r35;
	@%p4 bra 	BB29_6;
	bra.uni 	BB29_2;

BB29_6:
	add.s32 	%r65, %r8, %r3;
	ld.global.f32 	%f79, [%r7];
	shl.b32 	%r66, %r65, 2;
	add.s32 	%r67, %r34, %r66;
	ld.global.f32 	%f81, [%r67];
	add.s32 	%r21, %r37, -3;
	mul.f32 	%f11, %f18, %f18;
	mad.lo.s32 	%r69, %r36, 2, %r6;
	mad.lo.s32 	%r71, %r35, %r69, %r3;
	shl.b32 	%r72, %r71, 2;
	add.s32 	%r89, %r34, %r72;
	mul.lo.s32 	%r73, %r36, %r35;
	shl.b32 	%r23, %r73, 2;
	mad.lo.s32 	%r74, %r35, %r6, %r3;
	shl.b32 	%r75, %r74, 2;
	add.s32 	%r88, %r33, %r75;
	mov.u32 	%r87, -1;
	mov.f32 	%f80, %f79;
	bra.uni 	BB29_7;

BB29_10:
	mov.u32 	%r88, %r29;
	mov.u32 	%r89, %r28;
	st.global.f32 	[%r26], %f17;

BB29_7:
	mov.f32 	%f12, %f79;
	mov.f32 	%f79, %f80;
	mov.f32 	%f80, %f81;
	mov.u32 	%r27, %r89;
	mov.u32 	%r26, %r88;
	ld.global.f32 	%f81, [%r27];
	sub.f32 	%f16, %f81, %f80;
	sub.f32 	%f40, %f16, %f12;
	add.f32 	%f41, %f79, %f40;
	sub.f32 	%f42, %f12, %f79;
	sub.f32 	%f43, %f42, %f41;
	mul.f32 	%f44, %f41, %f18;
	mul.f32 	%f45, %f11, %f43;
	fma.rn.f32 	%f46, %f44, %f11, %f45;
	sub.f32 	%f47, %f80, %f12;
	fma.rn.f32 	%f48, %f47, %f18, %f46;
	add.f32 	%f17, %f79, %f48;
	add.s32 	%r28, %r27, %r23;
	add.s32 	%r29, %r26, %r23;
	add.s32 	%r87, %r87, 1;
	setp.lt.s32	%p6, %r87, %r21;
	@%p6 bra 	BB29_10;

	mad.lo.s32 	%r76, %r21, %r36, %r6;
	mad.lo.s32 	%r77, %r76, %r35, %r3;
	shl.b32 	%r78, %r77, 2;
	add.s32 	%r79, %r33, %r78;
	st.global.f32 	[%r79], %f17;
	sub.f32 	%f49, %f81, %f81;
	sub.f32 	%f50, %f49, %f79;
	add.f32 	%f51, %f80, %f50;
	sub.f32 	%f52, %f79, %f80;
	sub.f32 	%f53, %f52, %f51;
	mul.f32 	%f54, %f51, %f18;
	mul.f32 	%f55, %f11, %f53;
	fma.rn.f32 	%f56, %f54, %f11, %f55;
	sub.f32 	%f57, %f81, %f79;
	fma.rn.f32 	%f58, %f57, %f18, %f56;
	add.f32 	%f59, %f80, %f58;
	add.s32 	%r82, %r79, %r23;
	st.global.f32 	[%r82], %f59;
	sub.f32 	%f60, %f49, %f80;
	add.f32 	%f61, %f81, %f60;
	sub.f32 	%f62, %f80, %f81;
	sub.f32 	%f63, %f62, %f61;
	mul.f32 	%f64, %f61, %f18;
	mul.f32 	%f65, %f11, %f63;
	fma.rn.f32 	%f66, %f64, %f11, %f65;
	fma.rn.f32 	%f67, %f16, %f18, %f66;
	add.f32 	%f68, %f81, %f67;
	add.s32 	%r83, %r82, %r23;
	st.global.f32 	[%r83], %f68;
	bra.uni 	BB29_9;

BB29_2:
	add.f32 	%f1, %f18, 0f3F800000;
	ld.global.f32 	%f73, [%r7];
	add.s32 	%r9, %r37, -2;
	mul.f32 	%f3, %f1, %f1;
	add.s32 	%r49, %r3, %r8;
	shl.b32 	%r50, %r49, 2;
	add.s32 	%r86, %r34, %r50;
	mul.lo.s32 	%r51, %r36, %r35;
	shl.b32 	%r11, %r51, 2;
	mad.lo.s32 	%r53, %r35, %r6, %r3;
	shl.b32 	%r54, %r53, 2;
	add.s32 	%r85, %r33, %r54;
	mov.u32 	%r84, -1;
	mov.f32 	%f74, %f73;
	mov.f32 	%f75, %f73;
	bra.uni 	BB29_3;

BB29_5:
	mov.u32 	%r85, %r17;
	mov.u32 	%r86, %r16;
	st.global.f32 	[%r14], %f8;

BB29_3:
	mov.f32 	%f4, %f73;
	mov.f32 	%f73, %f74;
	mov.f32 	%f74, %f75;
	mov.u32 	%r15, %r86;
	mov.u32 	%r14, %r85;
	ld.global.f32 	%f75, [%r15];
	sub.f32 	%f19, %f75, %f74;
	sub.f32 	%f20, %f19, %f4;
	add.f32 	%f21, %f73, %f20;
	sub.f32 	%f22, %f4, %f73;
	sub.f32 	%f23, %f22, %f21;
	mul.f32 	%f24, %f1, %f21;
	mul.f32 	%f25, %f3, %f23;
	fma.rn.f32 	%f26, %f24, %f3, %f25;
	sub.f32 	%f27, %f74, %f4;
	fma.rn.f32 	%f28, %f27, %f1, %f26;
	add.f32 	%f8, %f73, %f28;
	add.s32 	%r16, %r15, %r11;
	add.s32 	%r17, %r14, %r11;
	add.s32 	%r84, %r84, 1;
	setp.lt.s32	%p5, %r84, %r9;
	@%p5 bra 	BB29_5;

	mad.lo.s32 	%r55, %r9, %r36, %r6;
	mad.lo.s32 	%r56, %r55, %r35, %r3;
	shl.b32 	%r57, %r56, 2;
	add.s32 	%r58, %r33, %r57;
	st.global.f32 	[%r58], %f8;
	sub.f32 	%f29, %f75, %f75;
	sub.f32 	%f30, %f29, %f73;
	add.f32 	%f31, %f74, %f30;
	sub.f32 	%f32, %f73, %f74;
	sub.f32 	%f33, %f32, %f31;
	mul.f32 	%f34, %f1, %f31;
	mul.f32 	%f35, %f3, %f33;
	fma.rn.f32 	%f36, %f34, %f3, %f35;
	sub.f32 	%f37, %f75, %f73;
	fma.rn.f32 	%f38, %f37, %f1, %f36;
	add.f32 	%f39, %f74, %f38;
	add.s32 	%r59, %r37, -1;
	mad.lo.s32 	%r60, %r59, %r36, %r6;
	mad.lo.s32 	%r61, %r60, %r35, %r3;
	shl.b32 	%r62, %r61, 2;
	add.s32 	%r63, %r33, %r62;
	st.global.f32 	[%r63], %f39;

BB29_9:
	ret;
}

	// .globl	CalculateMagnitudes
.entry CalculateMagnitudes(
	.param .u32 .ptr .global .align 4 CalculateMagnitudes_param_0,
	.param .u32 .ptr .global .align 8 CalculateMagnitudes_param_1,
	.param .u32 CalculateMagnitudes_param_2,
	.param .u32 CalculateMagnitudes_param_3,
	.param .u32 CalculateMagnitudes_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<30>;


	ld.param.u32 	%r3, [CalculateMagnitudes_param_0];
	ld.param.u32 	%r4, [CalculateMagnitudes_param_1];
	ld.param.u32 	%r5, [CalculateMagnitudes_param_2];
	ld.param.u32 	%r6, [CalculateMagnitudes_param_3];
	ld.param.u32 	%r7, [CalculateMagnitudes_param_4];
	mov.u32 	%r8, %ctaid.y;
	mov.u32 	%r9, %ntid.y;
	mov.b32	%r10, %envreg4;
	mad.lo.s32 	%r11, %r8, %r9, %r10;
	mov.u32 	%r12, %tid.y;
	add.s32 	%r1, %r11, %r12;
	mov.u32 	%r13, %ctaid.z;
	mov.u32 	%r14, %ntid.z;
	mov.b32	%r15, %envreg5;
	mad.lo.s32 	%r16, %r13, %r14, %r15;
	mov.u32 	%r17, %tid.z;
	add.s32 	%r2, %r16, %r17;
	setp.ge.s32	%p1, %r1, %r6;
	setp.ge.s32	%p2, %r2, %r7;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB30_2;

	mov.b32	%r18, %envreg3;
	mov.u32 	%r19, %ctaid.x;
	mov.u32 	%r20, %ntid.x;
	mad.lo.s32 	%r21, %r19, %r20, %r18;
	mov.u32 	%r22, %tid.x;
	add.s32 	%r23, %r21, %r22;
	mad.lo.s32 	%r24, %r2, %r6, %r1;
	mad.lo.s32 	%r25, %r24, %r5, %r23;
	shl.b32 	%r26, %r25, 3;
	add.s32 	%r27, %r4, %r26;
	ld.global.v2.f32 	{%f1, %f2}, [%r27];
	mul.f32 	%f5, %f2, %f2;
	fma.rn.f32 	%f6, %f1, %f1, %f5;
	sqrt.approx.f32 	%f7, %f6;
	shl.b32 	%r28, %r25, 2;
	add.s32 	%r29, %r3, %r28;
	st.global.f32 	[%r29], %f7;

BB30_2:
	ret;
}


  